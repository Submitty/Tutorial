{
    // autograding_method must be docker in order for networking to work. If you forget it,
    // your assignment should fail to build.
    "autograding_method" : "docker",
    "container_options" : {
      //States that a given testcase uses a router by default. (Default value is true)
      "use_router" : true
    },

    "autograding" : {
        "work_to_details" : [ "**/*.txt" ]
    },
    // Each testcase creates a new, unique set of docker containers and networks.
    "testcases" : [
        {
            //Despite the default being true, this testcase will not use a router.
            "use_router" : false,
            "title" : "Ping Pong",
            "containers" : [
                {
                    // Setting container_name allows you to later refer to the container by this handle
                    // (e.g. when specifying outgoing connections). By default containers are named
                    // container0, container1, container2, etc.
                    "container_name" : "server",
                    "commands" : ["python3 server.py server"],
                    //outgoing_connections list the containers that this container is allowed to network to.
                    "outgoing_connections" : ["client"]
                    // You can specify a docker image here, and if it is built on submitty, this container
                    // will use it. If unset, this field defaults to ubuntu:custom  -- the default
                    // submitty image.
                    //container_image : <image_name>
                },
                {
                    "container_name" : "client",
                    // It can be important to ensure your container's start in the correct order.
                    // In this example, we want the server to start before the client, so we add a sleep command.
                    "commands" : ["sleep 2", "python3 client.py client 0"],
                    "outgoing_connections" : ["server"]
                }
            ],
            "points" : 5,
            "validation": [
                {
                    "method" : "diff",
                    "actual_file" : "server/STDOUT.txt",
                    "expected_file" : "expected_server_output_0.txt",
                    "failure_message" : "ERROR: Your code did not match the expected output.",
                    "show_message" : "on_failure",
                    "deduction" : 0.5
                },
                {
                    "method" : "diff",
                    "actual_file" : "client/STDOUT_1.txt",
                    "expected_file" : "expected_client_output_0.txt",
                    "failure_message" : "ERROR: Your code did not match the expected output.",
                    "show_message" : "on_failure",
                    "deduction" : 0.5
                }
            ]
        },
        {
            "title" : "Ping Pong, Ping Pong",
            "containers" : [
                //This testcase is using a router, which will be injected into the network.
                {
                    "container_name" : "server",
                    "commands" : ["python3 server.py server"], 
                    "outgoing_connections" : ["client"]
                },
                {
                    "container_name" : "client",
                    "commands" : ["sleep 2", "python3 client.py client 1"],
                    "outgoing_connections" : ["server"]
                }
            ],
            "points" : 5,
            "validation": [
                {
                    "method" : "diff",
                    "actual_file" : "server/STDOUT.txt",
                    "expected_file" : "expected_server_output_1.txt",
                    "failure_message" : "ERROR: Your code did not match the expected output.",
                    "show_message" : "on_failure",
                    "deduction" : 0.5
                },
                {
                    "method" : "diff",
                    "actual_file" : "client/STDOUT_1.txt",
                    "expected_file" : "expected_client_output_1.txt",
                    "failure_message" : "ERROR: Your code did not match the expected output.",
                    "show_message" : "on_failure",
                    "deduction" : 0.5
                },
                //Adding this "sequence_diagram" filecheck will display a sequence diagram
                // of messages passed to the student.
                {
                    "sequence_diagram" : true,
                    "type" : "FileCheck",
                    "title" : "Sequence Diagram Text File",
                    "actual_file" : "router/sequence_diagram.txt",
                    "points" : 0
                }
            ]
        },
        {
            "title" : "Not Ping",
            "containers" : [
                {
                    "container_name" : "server",
                    "commands" : ["python3 server.py server"], 
                    "outgoing_connections" : ["client"]
                },
                {
                    "container_name" : "client",
                    "commands" : ["sleep 2", "python3 client.py client 2"],
                    "outgoing_connections" : ["server"]
                }
            ],
            "points" : 5,
            "validation": [
                {
                    "method" : "diff",
                    "actual_file" : "server/STDOUT.txt",
                    "expected_file" : "expected_server_output_2.txt",
                    "failure_message" : "ERROR: Your code did not match the expected output.",
                    "show_message" : "on_failure",
                    "deduction" : 0.5
                },
                {
                    "method" : "diff",
                    "actual_file" : "client/STDOUT_1.txt",
                    "expected_file" : "expected_client_output_2.txt",
                    "failure_message" : "ERROR: Your code did not match the expected output.",
                    "show_message" : "on_failure",
                    "deduction" : 0.5
                },
                //Adding this "sequence_diagram" filecheck will display a sequence diagram
                // of messages passed to the student.
                {
                    "sequence_diagram" : true,
                    "type" : "FileCheck",
                    "title" : "Sequence Diagram Text File",
                    "actual_file" : "router/sequence_diagram.txt",
                    "points" : 0
                }
            ]
        },
        {
            "title" : "Not Ping, Ping, Ping",
            "containers" : [
                {
                    "container_name" : "server",
                    "commands" : ["python3 server.py server"], 
                    "outgoing_connections" : ["client"]
                },
                {
                    "container_name" : "client",
                    "commands" : ["sleep 2", "python3 client.py client 3"],
                    "outgoing_connections" : ["server"]
                }
            ],
            "points" : 5,
            "validation": [
                {
                    "method" : "diff",
                    "actual_file" : "server/STDOUT.txt",
                    "expected_file" : "expected_server_output_3.txt",
                    "failure_message" : "ERROR: Your code did not match the expected output.",
                    "show_message" : "on_failure",
                    "deduction" : 0.5
                },
                {
                    "method" : "diff",
                    "actual_file" : "client/STDOUT_1.txt",
                    "expected_file" : "expected_client_output_3.txt",
                    "failure_message" : "ERROR: Your code did not match the expected output.",
                    "show_message" : "on_failure",
                    "deduction" : 0.5
                },
                //Adding this "sequence_diagram" filecheck will display a sequence diagram
                // of messages passed to the student.
                {
                    "sequence_diagram" : true,
                    "type" : "FileCheck",
                    "title" : "Sequence Diagram Text File",
                    "actual_file" : "router/sequence_diagram.txt",
                    "points" : 0
                }
            ]
        },
        {
            "title" : "UDP Test",
            "extra_credit" : true,
            "containers" : [
                {
                    "container_name" : "server",
                    "commands" : ["python3 server.py server udp_enabled"], 
                    "outgoing_connections" : ["client"]
                },
                {
                    "container_name" : "client",
                    "commands" : ["sleep 2", "python3 client.py client 4 udp_enabled"],
                    "outgoing_connections" : ["server"]
                },
                //This testcase uses a custom router. This container must be named router
                // and will automatically be connected up correctly.
                {
                    "container_name" : "router",
                    "commands" : ["python3 custom_router.py"]
                }
            ],
            "points" : 5,
            "validation": [
                {
                    "method" : "diff",
                    "actual_file" : "client/STDOUT_1.txt",
                    "expected_file" : "expected_client_output_4.txt",
                    "failure_message" : "ERROR: Your code did not match the expected output.",
                    "show_message" : "on_failure",
                    "deduction" : 1.0
                },
                //Adding this "sequence_diagram" filecheck will display a sequence diagram
                // of messages passed to the student.
                {
                    "sequence_diagram" : true,
                    "type" : "FileCheck",
                    "title" : "Sequence Diagram Text File",
                    "actual_file" : "router/sequence_diagram.txt",
                    "points" : 0
                }
            ]
        }
    ]
}
